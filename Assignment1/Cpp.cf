PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DUsing.  Def    ::= "using" QC1 ";" ;

terminator Def "" ;

AConst.  Arg    ::= "const" Arg1 ;
ACo.     Arg    ::= Arg1 ;
ADecl.   Arg1   ::= Type Id ;
ATmp.    Arg1   ::= Tmp Id ;
ADeclR.  Arg1   ::= Type "&" Id ;
ATmpR.   Arg1   ::= Tmp "&" Id ;
AInitR.  Arg1   ::= Id "&" Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SQCDec.      Stm ::= QC1 [Id] ";" ; --Qualified constant for a declaration
SQCInit.     Stm ::= QC1 Id "=" Exp ";" ; --Qualified constant for assigning a value
STempDec.    Stm ::= Tmp [Id] ";" ; --Template instantiation for a declaration
STempInit.   Stm ::= Tmp Id "=" Exp ";" ; --Template instantiation for assigning a value
--SIdDecls.    Stm ::= Id [Id] ";" ;
SIdInit.     Stm ::= Id Id "=" Exp ";" ;

terminator Stm "" ;

QTemp.   QC1   ::= Tmp "::" QC ;
QId.     QC1   ::= Id "::" QC ;
QCo.     QC    ::= QC1 ;
QString. QC    ::= "string" ;
QCTemp.  QC    ::= Tmp ;
QCId.    QC    ::= Id ;

Template. Tmp   ::= Id "<" Type ">" ; --Creation of templates such as vector<int>

EIndex.  Exp15  ::= Id "[" Exp11 "]" ;

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EString. Exp15  ::= String ;
EStrLst. Exp15  ::= [String] ; --List of strings, mainly for when cout << multiple lines of strings
EQC.     Exp15  ::= QC1 ;
ETemp.   Exp15  ::= Tmp ; --Same function as expression above, just with templates
EId.     Exp15  ::= Id ;

EApp.    Exp15  ::= Id "(" [Exp] ")" ;

ETypDef. Exp15  ::= "typedef" QC1 Id ;

ECall.   Exp15  ::= Id "." Id "(" [Exp] ")" ; --Calling a function on a specific variable

EProj.   Exp15  ::= Id "." Id ;

EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELShift. Exp10  ::= Exp10 "<<" Exp11 ; --The left shift operation, mostly used for outputting to a console or file
ERShift. Exp10  ::= Exp10 ">>" Exp11 ; --The right shift operation, mostly used for taking input from the user or a file and storing in a variable
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3  "=" Exp2 ;
EConQ.   Exp2   ::= Exp3  "?" Exp2 ;
EConC.   Exp2   ::= Exp3  ":" Exp2 ;
EThrow.  Exp1   ::= "throw" Exp2 ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp "," ;

rules Type   ::= "bool" | "int" | "double" | "void" | "string" ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;
separator nonempty String "" ; --String lists don't have to have separators

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
