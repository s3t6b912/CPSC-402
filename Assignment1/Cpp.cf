PDefs.   Program ::= [Def] ;

DInFun.     Def    ::= "inline" Type Id "(" [Arg] ")" "{" [Stm] "}" ; --allows for inline function declaration, reducing the compiler overhead for using that function
DObjInFun.  Def    ::= "inline" Name Id "(" [Arg] ")" "{" [Stm] "}" ; --allows for inline function declaration, reducing the compiler overhead for using that function
DInFunIn.   Def    ::= "inline" Type Id "(" [Arg] ")" ";" ; --allows for inline function declaration, reducing the compiler overhead for using that function
DObjFunIn.  Def    ::= "inline" Name Id "(" [Arg] ")" ";" ; --allows for inline function declaration, reducing the compiler overhead for using that function
DFun.       Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DObjFun.    Def    ::= Name Id "(" [Arg] ")" "{" [Stm] "}" ; --allows for functions to return abstract types or objects
DUsing.     Def    ::= "using" Name ";" ; --using directives: license to use an unqualified name from a name space.
DTypeN.     Def    ::= "typedef" Name Id ";" ; --Type definitions: a type and a name for it, allows for declaration of abstract types
DTypeT.     Def    ::= "typedef" Type Id ";" ; --Type definitions: a type and a name for it, allows for declaration of abstract types
DFunDecO.   Def    ::= Name Id "(" [Arg] ")" ";" ; --allows for functions to be initiated and defined later
DFunDecI.   Def    ::= Type Id "(" [Arg] ")" ";" ; --allows for functions to be initiated and defined later
DConstO.    Def    ::= "const" Name Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed
DConstT.    Def    ::= "const" Type Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed
DConstO.    Def    ::= "const" Name "&" Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed, Reference
DConstT.    Def    ::= "const" Type "&"Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed, Reference
DInit.      Def    ::= Type [Id] ";" ; --Defining a value using the primitive types
DNInit.     Def    ::= Name [Id] ";" ; --Defining a value using the Name type
DInitD.     Def    ::= Type Id "=" Exp ";" ; --Assigning a value using the primitive types
DNInitD.    Def    ::= Name Id "=" Exp ";" ; --Assigning a value using the Name type
DInitDR.    Def    ::= Type "&" Id "=" Exp ";" ; --Assigning a value using the primitive types, Reference
DNInitDR.   Def    ::= Name "&" Id "=" Exp ";" ; --Assigning a value using the Name type, Reference
DStruct.    Def    ::= "struct" Id "{" [Dec] "}" ";" ; --Structure declaration, a name and a list of declarations. Very similar to classes

terminator Def "" ;

AConst.  Arg    ::= "const" Arg1 ; --the const modifier allows for variables and references to be unmodifiable
ACo.     Arg    ::= Arg1 ; --Arg coercions
ADecl.   Arg1   ::= Type Id ;
AObj.    Arg1   ::= Name Id ; --Template argument
ADeclR.  Arg1   ::= Type "&" Id ; --Reference argument
AObjR.   Arg1   ::= Name "&" Id ; --Reference Name argument
ADeclD.  Arg1   ::= Type Id "=" Exp; --Type argument definition
AObjD.   Arg1   ::= Name Id "=" Exp ; --Template argument definition
ADeclRD. Arg1   ::= Type "&" Id "=" Exp ; --Reference argument definition
AObjRD.  Arg1   ::= Name "&" Id "=" Exp ; --Reference Name argument definition
ADeclI.  Arg1   ::= Type ; --init
AObjI.   Arg1   ::= Name ; --Name init
ADeclRI. Arg1   ::= Type "&" ; --Reference init
AObjRI.  Arg1   ::= Name "&" ; --Reference Name init

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SConstO.     Stm ::= "const" Name Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed
SConstT.     Stm ::= "const" Type Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed
SConstO.     Stm ::= "const" Name "&" Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed, Reference
SConstT.     Stm ::= "const" Type "&"Id "=" Exp ";" ; --allows for declaration of constant variables which can't be changed, Reference
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile.    Stm ::= "do" Stm "while" "(" Exp ")" ";" ; --Do while loop, same as a while loop but will allows loop at least once
SForN.       Stm ::= "for" "(" Name Id "=" Exp ";" Exp ";" Exp ")" Stm ; --For loop, will declare a variable and then loop through the statement while applying the first expression until the second expression is no longer true
SForT.       Stm ::= "for" "(" Type Id "=" Exp ";" Exp ";" Exp ")" Stm ; --For loop, will declare a variable and then loop through the statement while applying the first expression until the second expression is no longer true
SForNI.      Stm ::= "for" "(" Name Id ";" Exp ";" Exp ")" Stm ; --For loop, will declare a variable and then loop through the statement while applying the first expression until the second expression is no longer true
SForTI.      Stm ::= "for" "(" Type Id ";" Exp ";" Exp ")" Stm ; --For loop, will declare a variable and then loop through the statement while applying the first expression until the second expression is no longer true
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ; --if statement that doesn't use an else statement
SNDec.       Stm ::= Name [Id] ";" ; --Declaration using the Name type
SNInit.      Stm ::= Name Id "=" Exp ";" ; --Assigning a value using the Name type
STypeDefN.   Stm ::= "typedef" Name Id ";" ; --Type definitions: a type and a name for it, allows for declaration of abstract types
STypeDefT.   Stm ::= "typedef" Type Id ";" ; --Type definitions: a type and a name for it, allows for declaration of abstract types
SStruct.     Stm ::= "struct" Id "{" [Dec] "}" ";" ; --Structure declaration, a name and a list of declarations. Very similar to classes

terminator Stm "" ;

--This type is used simply for structure declarations
DecName.     Dec ::= Name Id ";" ;
DecType.     Dec ::= Type Id ";" ;

separator Dec "" ; --Makes the Dec type able to be put into a list

--The Name type, used as an abstraction and grouping of Id, templates, and qualified constants
NQC.   Name  ::= Name "::" Name ; --Qualified constants, which are constant names separated by ::
NTmp.  Name  ::= Tmp ;
NId.   Name  ::= Id ;

separator nonempty Name "," ; --Makes the Name type able to be put into a list

Template. Tmp   ::= Id "<" [Type] ">" ; --Creation of templates such as vector<int>
TempId.   Tmp   ::= Id "<" [Name] ">" ; --Creation of templates such as vector<int>

EStrLit. Exp16  ::= [String] ; --String literal: A string literal may consist of many can be concatenated strings and in this way divided over lines

EIndex.  Exp15  ::= Id "[" Exp11 "]" ; --Indexing, used to call specific positions in lists and arrays

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EChar.   Exp15  ::= Char ; --Allows usage of single characters denoted by ''
EQC.     Exp15  ::= Name ; --This is so "Names" can be used in an expression

EApp.    Exp15  ::= Id "(" [Exp] ")" ;

EProj.   Exp14  ::= Exp14 "." Exp15 ; --structure projection, used for calling members variables from objects
EPoint.  Exp14  ::= Exp14 "->" Exp15 ; --structure projection, used for calling members variables from objects
EDeRef.  Exp14  ::= "*" Id ; --Dereferencing, used to point to a location in memory where the variable is stored

EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;
ENeg.    Exp13  ::= "!" Exp14 ; --allows for negation of expressions, typically used for boolean expressions

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ; --Remainder/modulo operator, used for modular arithmetic
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELShift. Exp10  ::= Exp10 "<<" Exp11 ; --The left shift operation, mostly used for outputting to a console or file
ERShift. Exp10  ::= Exp10 ">>" Exp11 ; --The right shift operation, mostly used for taking input from the user or a file and storing in a variable
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3  "=" Exp2 ;
EAssP.   Exp2   ::= Exp3  "+=" Exp2 ; --plus-equals, will add the right expression to the left
EAssM.   Exp2   ::= Exp3  "-=" Exp2 ; --minus-equals, will subtract the right expression from the left
EConQ.   Exp2   ::= Exp3  "?" Exp2 ; --Conditional, in the form e ? e : e, same function as if/else statements where if the first expression is true, the second will be evaluated with the last being evaluated if it is false
EConC.   Exp2   ::= Exp3  ":" Exp2 ; --Conditional, in the form e ? e : e, same function as if/else statements where if the first expression is true, the second will be evaluated with the last being evaluated if it is false
EThrow.  Exp1   ::= "throw" Exp2 ; --throw exception, will give a message if a runtime error is encountered

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 16 ; --Increased coercions to 16

separator Exp "," ;

rules Type   ::= "bool" | "int" | "double" | "void" | "char" ; --Added char type

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;
separator nonempty Type "," ; --Allows for creation of typelists, used for templates
separator nonempty String "" ; --String literals don't have to have separators

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
